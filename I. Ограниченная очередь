class MyQueueSized:
    def __init__(self, max_size):
        self.queue = [None] * max_size
        self.max_n = max_size
        self.head = 0
        self.tail = 0
        self.size = 0

    def is_empty(self):
        return self.size == 0

    def push(self, x):
        if self.size != self.max_n:
            self.queue[self.tail] = x
            self.tail = (self.tail + 1) % self.max_n
            self.size += 1
        else:
            print('error')

    def pop(self):
        if self.is_empty():
            return None
        x = self.queue[self.head]
        self.queue[self.head] = None
        self.head = (self.head + 1) % self.max_n
        self.size -= 1
        return x

    def peek(self):
        return self.queue[self.head]

    def size(self):
        return self.size

def limited_queue(number_commands, commands, max_size):
    turn = MyQueueSized(max_size)
    for number in range(number_commands):
        if 'push' in commands[number]:
            turn.push(int(commands[number][1]))
        elif 'pop' in commands[number]:
            print(turn.pop())
        elif 'size' in commands[number]:
            print(turn.size)
        elif 'peek' in commands[number]:
            print(turn.peek())

if __name__ == '__main__':
    number_commands = int(input())
    max_size = int(input())
    commands = []
    for i in range(number_commands):
        command = input().split()
        commands.append(command)
    limited_queue(number_commands, commands, max_size)
    
    
# Формат ввода
# В первой строке записано одно число — количество команд, оно не превосходит 5000.
# Во второй строке задан максимально допустимый размер очереди, он не превосходит 5000.
# Далее идут команды по одной на строке. Команды могут быть следующих видов:

# push(x) — добавить число x в очередь;
# pop() — удалить число из очереди и вывести на печать;
# peek() — напечатать первое число в очереди;
# size() — вернуть размер очереди;
# При превышении допустимого размера очереди нужно вывести «error». При вызове операций pop() или peek() для пустой очереди нужно вывести «None».
# Формат вывода
# Напечатайте результаты выполнения нужных команд, по одному на строке.

# Пример 1
# Ввод
# 8
# 2
# peek
# push 5
# push 2
# peek
# size
# size
# push 1
# size

# Вывод
# None
# 5
# 2
# 2
# error
# 2
